// <auto-generated />
using System;
using Diplom.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Diplom.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230621152530_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Diplom.Models.Arrival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FoodCount")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int>("IdFood")
                        .HasColumnType("int");

                    b.Property<int>("IdVaultNote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdFood");

                    b.HasIndex("IdVaultNote");

                    b.ToTable("Arrivals");
                });

            modelBuilder.Entity("Diplom.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameFood")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameFood = "апельсины"
                        },
                        new
                        {
                            Id = 2,
                            NameFood = "вермешель"
                        },
                        new
                        {
                            Id = 3,
                            NameFood = "ванилин"
                        },
                        new
                        {
                            Id = 4,
                            NameFood = "вафли"
                        },
                        new
                        {
                            Id = 5,
                            NameFood = "геркулес"
                        },
                        new
                        {
                            Id = 6,
                            NameFood = "горбуша свежемороженная б/г"
                        },
                        new
                        {
                            Id = 7,
                            NameFood = "горох"
                        },
                        new
                        {
                            Id = 8,
                            NameFood = "горошек консервированный"
                        },
                        new
                        {
                            Id = 9,
                            NameFood = "груши"
                        },
                        new
                        {
                            Id = 10,
                            NameFood = "дрожжи"
                        },
                        new
                        {
                            Id = 11,
                            NameFood = "зефир"
                        },
                        new
                        {
                            Id = 12,
                            NameFood = "изюм"
                        },
                        new
                        {
                            Id = 13,
                            NameFood = "икра кабачковая"
                        },
                        new
                        {
                            Id = 14,
                            NameFood = "какао"
                        },
                        new
                        {
                            Id = 15,
                            NameFood = "капуста"
                        },
                        new
                        {
                            Id = 16,
                            NameFood = "картофель"
                        },
                        new
                        {
                            Id = 17,
                            NameFood = "кефир"
                        },
                        new
                        {
                            Id = 18,
                            NameFood = "кисель"
                        },
                        new
                        {
                            Id = 19,
                            NameFood = "компотная смесь (сухофрукты)"
                        },
                        new
                        {
                            Id = 20,
                            NameFood = "крахмал"
                        },
                        new
                        {
                            Id = 21,
                            NameFood = "кофейный напиток"
                        },
                        new
                        {
                            Id = 22,
                            NameFood = "крупа гречневая"
                        },
                        new
                        {
                            Id = 23,
                            NameFood = "крупа кукурузная"
                        },
                        new
                        {
                            Id = 24,
                            NameFood = "крупа манная"
                        },
                        new
                        {
                            Id = 25,
                            NameFood = "крупа перловая"
                        },
                        new
                        {
                            Id = 26,
                            NameFood = "крупа пшеничная"
                        },
                        new
                        {
                            Id = 27,
                            NameFood = "крупа ячневая"
                        },
                        new
                        {
                            Id = 28,
                            NameFood = "кукуруза консервированная"
                        },
                        new
                        {
                            Id = 29,
                            NameFood = "лимонная кислота"
                        },
                        new
                        {
                            Id = 30,
                            NameFood = "лавровый лист"
                        },
                        new
                        {
                            Id = 31,
                            NameFood = "лимоны"
                        },
                        new
                        {
                            Id = 32,
                            NameFood = "лук"
                        },
                        new
                        {
                            Id = 33,
                            NameFood = "макаронные изделия"
                        },
                        new
                        {
                            Id = 34,
                            NameFood = "масло растительное"
                        },
                        new
                        {
                            Id = 35,
                            NameFood = "масло сливочное"
                        },
                        new
                        {
                            Id = 36,
                            NameFood = "минтай с/м б/г"
                        },
                        new
                        {
                            Id = 37,
                            NameFood = "молоко свежее 2,5%"
                        },
                        new
                        {
                            Id = 38,
                            NameFood = "молоко сгущенное"
                        },
                        new
                        {
                            Id = 39,
                            NameFood = "молоко сухое"
                        },
                        new
                        {
                            Id = 40,
                            NameFood = "морковь"
                        },
                        new
                        {
                            Id = 41,
                            NameFood = "мука пшеничная"
                        },
                        new
                        {
                            Id = 42,
                            NameFood = "мясо говядина без кости"
                        },
                        new
                        {
                            Id = 43,
                            NameFood = "мясо говядина на кости"
                        },
                        new
                        {
                            Id = 44,
                            NameFood = "мясо птицы"
                        },
                        new
                        {
                            Id = 45,
                            NameFood = "огурцы соленые"
                        },
                        new
                        {
                            Id = 46,
                            NameFood = "паста томатная"
                        },
                        new
                        {
                            Id = 47,
                            NameFood = "печень говяжья"
                        },
                        new
                        {
                            Id = 48,
                            NameFood = "печенье"
                        },
                        new
                        {
                            Id = 49,
                            NameFood = "повидло"
                        },
                        new
                        {
                            Id = 50,
                            NameFood = "пшено"
                        },
                        new
                        {
                            Id = 51,
                            NameFood = "рис"
                        },
                        new
                        {
                            Id = 52,
                            NameFood = "ряженка"
                        },
                        new
                        {
                            Id = 53,
                            NameFood = "сахар"
                        },
                        new
                        {
                            Id = 54,
                            NameFood = "свекла"
                        },
                        new
                        {
                            Id = 55,
                            NameFood = "сельдь слабосоленая"
                        },
                        new
                        {
                            Id = 56,
                            NameFood = "сметана"
                        },
                        new
                        {
                            Id = 57,
                            NameFood = "снежок (кг)"
                        },
                        new
                        {
                            Id = 58,
                            NameFood = "сок фруктовый"
                        },
                        new
                        {
                            Id = 59,
                            NameFood = "с.м ягода"
                        },
                        new
                        {
                            Id = 60,
                            NameFood = "соль йодированная"
                        },
                        new
                        {
                            Id = 61,
                            NameFood = "сушки"
                        },
                        new
                        {
                            Id = 62,
                            NameFood = "сыр"
                        },
                        new
                        {
                            Id = 63,
                            NameFood = "творог"
                        },
                        new
                        {
                            Id = 64,
                            NameFood = "тушенка"
                        },
                        new
                        {
                            Id = 65,
                            NameFood = "хлеб пшеничный"
                        },
                        new
                        {
                            Id = 66,
                            NameFood = "хлеб ржаной"
                        },
                        new
                        {
                            Id = 67,
                            NameFood = "чай"
                        },
                        new
                        {
                            Id = 68,
                            NameFood = "чернослив"
                        },
                        new
                        {
                            Id = 69,
                            NameFood = "шиповник"
                        },
                        new
                        {
                            Id = 70,
                            NameFood = "яблоки"
                        },
                        new
                        {
                            Id = 71,
                            NameFood = "яйцо"
                        });
                });

            modelBuilder.Entity("Diplom.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Суп молочный с макаронными изделиями"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Кофейный напиток с молоком"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Батон с маслом (20/5)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Сок фруктовый"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Капуста припущенная"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Борщ со свежей капустой, картофелем на м/к бульоне со сметаной"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Суфле из печени"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Соус красный основной"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Гречка отварная с маслом"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Компот из смеси сухофруктов"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Хлеб  пшеничный"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Хлеб   ржаной"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Снежок"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ватрушка с повидлом"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Котлета/биточек рыбный"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Рагу овощное"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Чай с сахаром"
                        });
                });

            modelBuilder.Entity("Diplom.Models.MealTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Завтрак  "
                        },
                        new
                        {
                            Id = 2,
                            Name = "2-ой завтрак"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Обед"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Полдник"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ужин"
                        });
                });

            modelBuilder.Entity("Diplom.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildCount")
                        .HasColumnType("int");

                    b.Property<string>("ChildHouse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Diplom.Models.MenuFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<double>("CountPerUnit")
                        .HasColumnType("float");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("MealTimeId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Supply")
                        .HasColumnType("float");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("MealTimeId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UnitId");

                    b.ToTable("MenuFoods");
                });

            modelBuilder.Entity("Diplom.Models.PreviousBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("EndBalance")
                        .HasColumnType("float");

                    b.Property<int>("IdFood")
                        .HasColumnType("int");

                    b.Property<int>("IdVaultNote")
                        .HasColumnType("int");

                    b.Property<double?>("StartBalance")
                        .IsRequired()
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdFood");

                    b.HasIndex("IdVaultNote");

                    b.ToTable("PreviousBalances");
                });

            modelBuilder.Entity("Diplom.Models.ProductConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FoodCountChild")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("FoodCountKid")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int>("IdFood")
                        .HasColumnType("int");

                    b.Property<int>("IdVaultNote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdFood");

                    b.HasIndex("IdVaultNote");

                    b.ToTable("ProductConsumptions");
                });

            modelBuilder.Entity("Diplom.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Кг"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Л"
                        },
                        new
                        {
                            Id = 3,
                            Name = "шт"
                        });
                });

            modelBuilder.Entity("Diplom.Models.Vault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Vaults");
                });

            modelBuilder.Entity("Diplom.Models.VaultNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdVault")
                        .HasColumnType("int");

                    b.Property<int>("KidCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdVault");

                    b.ToTable("VaultNotes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Diplom.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Diplom.Models.Arrival", b =>
                {
                    b.HasOne("Diplom.Models.Food", "Food")
                        .WithMany("Arrivals")
                        .HasForeignKey("IdFood")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplom.Models.VaultNote", "VaultNote")
                        .WithMany("Arrivals")
                        .HasForeignKey("IdVaultNote")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("VaultNote");
                });

            modelBuilder.Entity("Diplom.Models.Menu", b =>
                {
                    b.HasOne("Diplom.Models.ApplicationUser", "ApplicationUsers")
                        .WithMany("Menus")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("Diplom.Models.MenuFood", b =>
                {
                    b.HasOne("Diplom.Models.Meal", "Meal")
                        .WithMany("MenuFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diplom.Models.MealTime", "MealTime")
                        .WithMany("MenuFoods")
                        .HasForeignKey("MealTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diplom.Models.Menu", "Menu")
                        .WithMany("MenuFoods")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diplom.Models.Unit", "Unit")
                        .WithMany("MenuFoods")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("MealTime");

                    b.Navigation("Menu");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Diplom.Models.PreviousBalance", b =>
                {
                    b.HasOne("Diplom.Models.Food", "Food")
                        .WithMany("PreviousBalances")
                        .HasForeignKey("IdFood")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplom.Models.VaultNote", "VaultNote")
                        .WithMany("PreviousBalances")
                        .HasForeignKey("IdVaultNote")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("VaultNote");
                });

            modelBuilder.Entity("Diplom.Models.ProductConsumption", b =>
                {
                    b.HasOne("Diplom.Models.Food", "Food")
                        .WithMany("ProductConsumptions")
                        .HasForeignKey("IdFood")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplom.Models.VaultNote", "VaultNote")
                        .WithMany("ProductConsumptions")
                        .HasForeignKey("IdVaultNote")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("VaultNote");
                });

            modelBuilder.Entity("Diplom.Models.Vault", b =>
                {
                    b.HasOne("Diplom.Models.ApplicationUser", "ApplicationUsers")
                        .WithMany("Vaults")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("Diplom.Models.VaultNote", b =>
                {
                    b.HasOne("Diplom.Models.Vault", "Vault")
                        .WithMany("VaultNotes")
                        .HasForeignKey("IdVault")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diplom.Models.ApplicationUser", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("Diplom.Models.ApplicationUser", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diplom.Models.Food", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("PreviousBalances");

                    b.Navigation("ProductConsumptions");
                });

            modelBuilder.Entity("Diplom.Models.Meal", b =>
                {
                    b.Navigation("MenuFoods");
                });

            modelBuilder.Entity("Diplom.Models.MealTime", b =>
                {
                    b.Navigation("MenuFoods");
                });

            modelBuilder.Entity("Diplom.Models.Menu", b =>
                {
                    b.Navigation("MenuFoods");
                });

            modelBuilder.Entity("Diplom.Models.Unit", b =>
                {
                    b.Navigation("MenuFoods");
                });

            modelBuilder.Entity("Diplom.Models.Vault", b =>
                {
                    b.Navigation("VaultNotes");
                });

            modelBuilder.Entity("Diplom.Models.VaultNote", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("PreviousBalances");

                    b.Navigation("ProductConsumptions");
                });

            modelBuilder.Entity("Diplom.Models.ApplicationUser", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Vaults");
                });
#pragma warning restore 612, 618
        }
    }
}
